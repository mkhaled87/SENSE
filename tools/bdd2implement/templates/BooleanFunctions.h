/***********************************************************************************
* Company: TUM - HCS
* Engineer: M. Khaled
*
* This file was automatically generated by the tool BDD2Implement.
* 
* Create Date: #$DATES$#
* Module Name: bddWrapper as C/C++ code
* Project Name: Symbolic Controller implementation
* Target: C/C++
*
* Additional Comments: refer to HCS website for additional information and toos:
*
* 	http://www.hcs.ei.tum.de
*
***********************************************************************************/

/* Remove this if you want to use the code in c++ */
/* ---------------------------------------------- */
typedef int bool;
#define true 1
#define false 0
/* ---------------------------------------------- */


#define BDD_INPUT_BITS #$INPUT_COUNT$#
#define BDD_OUTPUT_BITS #$OUTPUT_COUNT$#

#$OUTPUT_FUNCTIONS$#

typedef bool (*bool_func_ptr)(#$INPUT_VARS$#);
bool_func_ptr bddBoolFunctions[BDD_OUTPUT_BITS];



void interfaceBooleanFunctions(bool* inputValues, bool* outValues){
#$BOOL_FUNC_ARRAY$#
	unsigned long int i;
	for(i=0; i<BDD_OUTPUT_BITS; i++){
		outValues[i]=bddBoolFunctions[i]( #$PASS_ARGS$# );
	}
}


void int_to_bool(unsigned long int in, int count, bool* out){
    unsigned long int mask = 1L;
    int i;
    for (i = 0; i < count; i++) {
        out[i] = (in & mask) ? true : false;
        in >>= 1;
    }
}

unsigned long int bool_to_int(int count, bool* in){
    int i;
    unsigned long int val=0;
    unsigned long int weight=1;
    for (i = 0; i < count; i++) {
        val += weight*in[i];
        weight <<= 1;
    }
    return val;
}

unsigned long int getControlAction(unsigned long int state){
	bool stateBits[BDD_INPUT_BITS];
	bool actionBits[BDD_OUTPUT_BITS];
	int_to_bool(state, BDD_INPUT_BITS, stateBits);
	interfaceBooleanFunctions(stateBits, actionBits);
	return bool_to_int(BDD_OUTPUT_BITS, actionBits);
}
