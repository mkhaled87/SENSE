/* state space dim */
#define sDIM 3
#define iDIM 2


#include <array>
#include <deque>
#include <iostream>
#include <iomanip>
#include <string>

#include "cuddObj.hh"
Cudd mgr;

// To be able to simulate the NCS controller
#include "../../../interface/common/psmController.hh"

// To be able to simulate the system by solving the ODE
#include "RungeKutta4.hh"

/* state space dim */
#define sDIM 3
#define iDIM 2

#define concrete_type double
#define SEPARATOR "*************************************************************************************************************************"
#define LONG_TAB  "\t\t\t\t\t"

/* data types for the ode solver */
typedef std::array<concrete_type,sDIM> x_type;
typedef std::array<concrete_type,iDIM> u_type;
double Inf = std::numeric_limits<double>::infinity();


// the samnpling time
const concrete_type tau = 0.3;

// the ODE solver
const int nint=5;
OdeSolver ode_solver(sDIM,nint,tau);

// system and NCS dynamics
#define STATE_ETA {0.1, 0.1, 0.1}
#define INITIAL_STATE {0.4, 4.4, 0.0}
#define INITIAL_INPUT {0.0, 0.0}

#define NSC_MAX 2
#define NCA_MAX 2
auto  vehicle_post = [](x_type &xpost, const x_type &x, const u_type &u) -> void {

  /* the ode describing the vehicle */
  auto rhs =[](x_type& xx,  const x_type &x, const u_type &u) -> void {
      concrete_type alpha=std::atan(std::tan(u[1])/2.0);
      xx[0] = u[0]*std::cos(alpha+x[2])/std::cos(alpha);
      xx[1] = u[0]*std::sin(alpha+x[2])/std::cos(alpha);
      xx[2] = u[0]*std::tan(u[1]);
  };
  
  xpost[0] = x[0];
  xpost[1] = x[1];
  xpost[2] = x[2];
  
  ode_solver(rhs,xpost,u);
};
auto radius_post = [](x_type &rpost, const x_type &r, const u_type &u) -> void {
    concrete_type c = std::abs(u[0]*std::sqrt(std::tan(u[1])*std::tan(u[1])/4.0+1));
    rpost[0] = r[0]+c*r[2]*0.3;
    rpost[1] = r[1]+c*r[2]*0.3;
	rpost[2] = r[2];
};

// some utility functions
void print_vector(const std::vector<concrete_type>& v){
	for(size_t i=0; i<v.size(); i++)
		std::cout << std::setw(-6) << v[i] << " ";
}
std::vector<concrete_type> concatenate_vectors(const std::vector<concrete_type>& v1, const std::vector<concrete_type>& v2){
	std::vector<concrete_type> ret;
	
	for(size_t i=0; i<v1.size(); i++)
		ret.push_back(v1[i]);
	
	for(size_t i=0; i<v2.size(); i++)
		ret.push_back(v2[i]);	
	
	return ret;
}
std::vector<concrete_type> state2vector(const x_type& state){
	std::vector<concrete_type> ret;
	
	for(size_t i=0; i<sDIM; i++)
		ret.push_back(state[i]);
	
	return ret;
}
std::vector<concrete_type> input2vector(const u_type& input){
	std::vector<concrete_type> ret;
	
	for(size_t i=0; i<iDIM; i++)
		ret.push_back(input[i]);
	
	return ret;
}
void print_state_time(const x_type& x, long double simtime ){
	std::cout << "At [" << std::setw(3) << simtime << " sec.], the state of system is ";
	print_vector(state2vector(x));
}
bool state_is_inf(const x_type& x){
  for(size_t i=0; i<sDIM; i++)
	  if(x[i] != Inf)
		return false;
		
  return true;
}


// ------------------------------------------------------------------
// the system
// ------------------------------------------------------------------
void sim_system(x_type& out_state, const u_type& in_action){

  static bool dataLoaded = false;
  static SymbolicSet transitions;
  static SymbolicSet transitions_fine;
  static SymbolicSet target;
  static SymbolicSet obstacles;
  static x_type x  = INITIAL_STATE;
  static x_type r  = STATE_ETA;
  static std::vector<size_t> xu_idx;  
  x_type xpost;
  x_type rpost;
  
  if(!dataLoaded){
	  dataLoaded = true;
	  transitions.LoadFromFile(mgr, "scots-files/vehicle_rel.bdd");
	  transitions_fine.LoadFromFile(mgr, "scots-files/vehicle_rel_fine.bdd", 1);
      target.LoadFromFile(mgr, "scots-files/vehicle_ts.bdd");
      obstacles.LoadFromFile(mgr, "scots-files/vehicle_obst.bdd");	  
	  
	  for(size_t i=0; i<sDIM+iDIM; i++)
		xu_idx.push_back(i);	  
  }
        
  
  std::cout << std::endl << LONG_TAB << "-----------------------------------------";  
  std::cout << std::endl << LONG_TAB << "System:";
  
  // compute concrete post
  vehicle_post(xpost, x, in_action);
  radius_post(rpost, r, in_action);
  std::cout << std::endl << LONG_TAB << "concrete post state is ";
  print_vector(state2vector(xpost));
  std::cout << std::endl << LONG_TAB << "concrete rad  post  is ";
  print_vector(state2vector(rpost));
  
  // compute symbolic posts
  std::vector<std::vector<concrete_type>> symposts = transitions.setValuedMap(concatenate_vectors(state2vector(x), input2vector(in_action)),xu_idx);
  std::cout << std::endl << LONG_TAB << "symbolic posts (" << symposts.size() << ") are: ";
  for(size_t i=0;i<symposts.size(); i++){
	std::cout << std::endl << LONG_TAB << "\t";
	print_vector(symposts[i]);
  }	
  
  std::vector<std::vector<concrete_type>> symposts_fine = transitions_fine.setValuedMap(concatenate_vectors(state2vector(x), input2vector(in_action)),xu_idx);
  std::cout << std::endl << LONG_TAB << "symbolic posts after NCS*tau in fine abstraction (" << symposts_fine.size() << ") are: ";
  for(size_t i=0;i<symposts_fine.size(); i++){
	std::cout << std::endl << LONG_TAB << "\t";
	print_vector(symposts_fine[i]);
  }	  
  
  for(size_t i=0; i<sDIM; i++){
	out_state[i] = xpost[i];
	x[i] = xpost[i];
  }
  
  if(target.isElement(state2vector(out_state)))
	  throw "Simulation finished after reaching the target !";
  
  if(obstacles.isElement(state2vector(out_state)))
	  throw "Simulation finished after reaching an obstacle !";  
  
}

// ------------------------------------------------------------------
// the channel SC
// ------------------------------------------------------------------
void sim_channel_sc(x_type& out_state, const x_type& in_state){	  
  static std::deque<x_type> SC_CHANNEL;
  static x_type q  = {Inf, Inf, Inf};
  
  // fill the NCS SC channel
  if(SC_CHANNEL.size() == 0)
	for(size_t i=0; i<NSC_MAX; i++)
	  SC_CHANNEL.push_back(q);
  
  std::cout << std::endl << LONG_TAB << "-----------------------------------------";  
  std::cout << std::endl << LONG_TAB << "SC Channel:";     
  std::cout << std::endl << LONG_TAB << "           => ["; print_vector(state2vector(in_state)); std::cout << "]";
  std::cout << std::endl;  
  
  for(size_t i=0; i<SC_CHANNEL.size(); i++){
	std::cout << std::endl << LONG_TAB << "               \t";  
	print_vector(state2vector(SC_CHANNEL[i]));	
  }
  
  // get last element
  for(size_t i=0; i<sDIM; i++)
	out_state[i] = SC_CHANNEL[SC_CHANNEL.size()-1][i];

  std::cout << std::endl;
  std::cout << std::endl << LONG_TAB << "           \t\t=> ["; print_vector(state2vector(out_state)); std::cout << "]";
  
  // push new element
  SC_CHANNEL.pop_back();
  SC_CHANNEL.push_front(in_state);  
}

// ------------------------------------------------------------------
// the controller
// ------------------------------------------------------------------
void sim_controller(u_type& out_action, const x_type& in_state){	
    
  static bool dataLoaded = false;
  static std::vector<size_t> x_idx;
  static SymbolicSet controller;
  static u_type u0 = INITIAL_INPUT;
  static std::deque<u_type> inputMemory;
  
  if(!dataLoaded){
	  dataLoaded = true;  
	  
	  controller.LoadFromFile(mgr, "scots-files/vehicle_controller.bdd");
	
	  for(size_t i=0; i<sDIM; i++)
		x_idx.push_back(i); 
  
	  for(size_t i=0; i<NCA_MAX; i++)
		inputMemory.push_back(u0);
  }
  
  
  std::cout << std::endl << LONG_TAB << "-----------------------------------------";  
  std::cout << std::endl << LONG_TAB << "Controller:";

  std::cout << std::endl << LONG_TAB << "Input memory is [";
  for(size_t i=0; i<inputMemory.size();i ++){
	print_vector(input2vector(inputMemory[i]));
	
	if(i<inputMemory.size()-1)
		std::cout << " | ";
  }	    
  std::cout << "]";
  
  if(!state_is_inf(in_state)){	  
	  std::cout << std::endl << LONG_TAB << "Controller recieved non-q state! ";
  
	  // Simulate with the concrete model
	  x_type x_sys, x_tmp;
	  x_tmp = in_state;
	  for(size_t i=0; i<NSC_MAX; i++){						/* state detector */
		u_type u =  inputMemory[inputMemory.size()-1-i];
		vehicle_post(x_sys, x_tmp, u);
		x_tmp = x_sys;		
	  }
	  
	  std::cout << std::endl << LONG_TAB << "Detected System state by concrete simulation: ";
	  print_vector(state2vector(x_sys));
	  
	  
	  for(size_t i=NSC_MAX; i<NSC_MAX+NCA_MAX; i++){		/* state predector */
		u_type u =  inputMemory[inputMemory.size()-1-i];
		vehicle_post(x_sys, x_tmp, u);
		x_tmp = x_sys;		
	  }
	  
	  std::cout << std::endl << LONG_TAB << "Expected System state in the future: ";
	  print_vector(state2vector(x_sys));
	  
	  inputMemory.pop_back();
  
	  // get all possible inputs
	  std::vector<std::vector<concrete_type>> inputs = controller.setValuedMap(state2vector(x_sys),x_idx);	  
	  if(inputs.size() == 0)
		  throw "Simulation finished after reaching a non-controllable state !";

	  std::cout << std::endl << LONG_TAB << "found " << inputs.size() << " inputs ";		
		  
	  // select one input	  
	  for(size_t i=0; i<iDIM; i++)
		  out_action[i] = inputs[0][i];
	  
	  std::cout << "and selected the input: ";
	  print_vector(input2vector(out_action));
  }else{
	  std::cout << std::endl << LONG_TAB << "Controller recieved a q state! ";
	  std::cout << "and selected the initial input: ";
	  print_vector(input2vector(u0));
	  
	  for(size_t i=0; i<iDIM; i++)
		  out_action[i] = u0[i];
	  
	  std::cout << std::endl;
  }
  
  
  inputMemory.push_front(out_action);
}

// ------------------------------------------------------------------
// the channel CA
// ------------------------------------------------------------------
void sim_channel_ca(u_type& out_action, const u_type& in_action){	
  
  static std::deque<u_type> CA_CHANNEL;
  static u_type u0 = INITIAL_INPUT;
  
  // fill the NCS CA channel
  if(CA_CHANNEL.size() == 0)
    for(size_t i=0; i<NCA_MAX; i++)
	  CA_CHANNEL.push_back(u0);
  
  
  std::cout << std::endl << LONG_TAB << "-----------------------------------------";  
  std::cout << std::endl << LONG_TAB << "CA Channel:";     
  std::cout << std::endl << LONG_TAB << "           => ["; print_vector(input2vector(in_action)); std::cout << "]";
  std::cout << std::endl;
  
  for(size_t i=0; i<CA_CHANNEL.size(); i++){
	std::cout << std::endl << LONG_TAB << "               \t";  
	print_vector(input2vector(CA_CHANNEL[i]));	
  }

  // read last element
  for(size_t i=0; i<iDIM; i++)
	out_action[i] = CA_CHANNEL[CA_CHANNEL.size()-1][i];    

  std::cout << std::endl;
  std::cout << std::endl << LONG_TAB << "           \t\t=> ["; print_vector(input2vector(out_action)); std::cout << "]";

  // push new element
  CA_CHANNEL.pop_back();
  CA_CHANNEL.push_front(in_action);  
 
}


int main() {    
  long double simtime = 0.0;

  // prepare for sim
  x_type x_system = INITIAL_STATE;
  x_type x_channel_sc;
  u_type u_controller;
  u_type u_channel_ca;
   
  // simulation loop
  std::cout << SEPARATOR << std::endl;
  while(true){
	try{
	  // ------------------------------------------------------------------
	  // current state of the system
	  // ------------------------------------------------------------------  
	  print_state_time(x_system, simtime);

	  // ------------------------------------------------------------------
	  // SC Channel
	  // ------------------------------------------------------------------  
	  sim_channel_sc(x_channel_sc, x_system);
	  	  
	  // ------------------------------------------------------------------
	  // Controller
	  // ------------------------------------------------------------------  
	  sim_controller(u_controller, x_channel_sc);
	  
	  // ------------------------------------------------------------------
	  // CA Channel
	  // ------------------------------------------------------------------  
	  sim_channel_ca(u_channel_ca, u_controller);	  
	  	  
	  // ------------------------------------------------------------------
	  // The system
	  // ------------------------------------------------------------------  
	  sim_system(x_system, u_channel_ca);

	  // ------------------------------------------------------------------
	  // prepare for next loop
	  // ------------------------------------------------------------------	  
	  simtime += tau;	  
	  std::cout << std::endl;	 
	  std::cout << SEPARATOR << std::endl;
	}
	catch(const char* msg){
		std::cout << std::endl;
		std::cout << msg << std::endl;
		return 0;
	}
  }  
  return 0;
}




